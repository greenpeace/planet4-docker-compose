---
version: 2.1

docker_auth: &docker_auth
  username: $DOCKERHUB_USERNAME
  password: $DOCKERHUB_PASSWORD

defaults: &defaults
  docker:
    - image: greenpeaceinternational/circleci-base:latest
      auth:
        <<: *docker_auth
  working_directory: /home/circleci/app

orbs:
  slack: circleci/slack@3.4.2

commands:
  install_gcloud:
    steps:
      - run:
          name: Install gcloud
          command: |
              sudo apt-get remove -y --purge man-db
              echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] \
                https://packages.cloud.google.com/apt cloud-sdk main" \
                | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
              curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | \
                sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
              sudo apt-get update && sudo apt-get install -y google-cloud-sdk
  activate_gcloud:
    steps:
      - run:
          name: Activate gcloud
          command: |
            git clone --depth=1 https://github.com/greenpeace/planet4-circleci.git
            ./planet4-circleci/src/bin/activate-gcloud-account.sh


jobs:
  codeception:
    <<: *defaults
    environment:
      APP_IMAGE: gcr.io/planet-4-151612/planet4-base-app:main
      OPENRESTY_IMAGE: gcr.io/planet-4-151612/planet4-base-openresty:main
    parameters:
      notify:
        type: boolean
        default: false
    steps:
      - checkout
      - restore_cache:
          keys:
            - composer-v1-{{ .Branch }}-{{ .Revision }}-{{ .BuildNum }}
            - composer-v1-{{ .Branch }}-{{ .Revision }}
            - composer-v1-{{ .Branch }}
            - composer-v1
      - setup_remote_docker:
          docker_layer_caching: false
      - run: make ci
      - save_cache:
          key: composer-v1-{{ .Branch }}-{{ .Revision }}-{{ .BuildNum }}
          paths:
            - defaultcontent
      - run:
          name: Run acceptance tests
          command: make test
      - run:
          name: Generate artifacts
          command: make ci-extract-artifacts
          when: always
      - store_test_results:
          path: artifacts
      - store_artifacts:
          path: artifacts
      - when:
          condition: << parameters.notify >>
          steps:
            # Notify p4-builds-ci
            - slack/status:
                fail_only: true
                channel: C024ZM2UB55
                webhook: ${SLACK_NRO_WEBHOOK}

  localdev:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      APP_IMAGE: gcr.io/planet-4-151612/wordpress:main
      OPENRESTY_IMAGE: gcr.io/planet-4-151612/planet4-base-openresty:main
      GOOGLE_PROJECT_ID: planet-4-151612
      NRO_NAME: greece
      NRO_DB_VERSION: latest
    parameters:
      notify:
        type: boolean
        default: false
    steps:
      - checkout
      - run:
          name: Create local dev environment
          command: make dev
      - run:
          name: Basic checks
          command: ./scripts/status-report.sh
      - run:
          name: Create release from install
          command: |
              mkdir -p /tmp/workspace/build
              export DEVRELEASE_VERSION="$(date +'%Y%m%d')"
              # <sudo> to bypass permissions issues with wflogs files
              RELEASE=$(sudo -E make create-dev-export)
              echo "${RELEASE}" > /tmp/workspace/build/release.txt
              mv "${RELEASE}" /tmp/workspace/build/
      - install_gcloud
      - activate_gcloud
      - run:
          name: Enable NRO dev environment
          command: make nro-enable
      - run:
          name: Basic checks
          command: ./scripts/status-report.sh
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - build/*
      - when:
          condition: << parameters.notify >>
          steps:
            # Notify p4-builds-ci
            - slack/status:
                fail_only: true
                channel: C024ZM2UB55
                webhook: ${SLACK_NRO_WEBHOOK}

  dev-from-release:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      APP_IMAGE: gcr.io/planet-4-151612/wordpress:main
      OPENRESTY_IMAGE: gcr.io/planet-4-151612/planet4-base-openresty:main
    parameters:
      notify:
        type: boolean
        default: false
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Create local environment from release
          command: |
              cp /tmp/workspace/build/* ./ && \
              LOCAL_DEVRELEASE=$(cat /tmp/workspace/build/release.txt) make dev-from-release
      - run:
          name: Basic checks
          command: ./scripts/status-report.sh
      - when:
          condition: << parameters.notify >>
          steps:
            # Notify p4-builds-ci
            - slack/status:
                fail_only: true
                channel: C024ZM2UB55
                webhook: ${SLACK_NRO_WEBHOOK}

  nro-from-release:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      APP_IMAGE: gcr.io/planet-4-151612/wordpress:main
      OPENRESTY_IMAGE: gcr.io/planet-4-151612/planet4-base-openresty:main
      GOOGLE_PROJECT_ID: planet-4-151612
      NRO_NAME: greece
      NRO_DB_VERSION: latest
    parameters:
      notify:
        type: boolean
        default: false
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - install_gcloud
      - activate_gcloud
      - run:
          name: Create NRO environment from release
          command: |
              cp /tmp/workspace/build/* ./
              RELEASE=$(cat /tmp/workspace/build/release.txt)
              LOCAL_DEVRELEASE=${RELEASE} make nro-from-release
      - run:
          name: Basic checks
          command: ./scripts/status-report.sh
      - when:
          condition: << parameters.notify >>
          steps:
            # Notify p4-builds-ci
            - slack/status:
                fail_only: true
                channel: C024ZM2UB55
                webhook: ${SLACK_NRO_WEBHOOK}

  publish-release:
    <<: *defaults
    environment:
      GOOGLE_PROJECT_ID: planet-4-151612
      BUCKET_NAME: planet4-default-content
    parameters:
      notify:
        type: boolean
        default: false
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run: activate-gcloud-account.sh
      - run:
          name: Push dev release to cloud storage
          command: |
              RELEASE=$(cat /tmp/workspace/build/release.txt)
              LATEST="planet4-persistence-latest.gz"
              gsutil cp -a public-read /tmp/workspace/build/${RELEASE} gs://${BUCKET_NAME}
              mv /tmp/workspace/build/${RELEASE} /tmp/workspace/build/${LATEST}
              gsutil cp -a public-read /tmp/workspace/build/${LATEST} gs://${BUCKET_NAME}
      - when:
          condition: << parameters.notify >>
          steps:
            # Notify p4-builds-ci
            - slack/status:
                fail_only: true
                channel: C024ZM2UB55
                webhook: ${SLACK_NRO_WEBHOOK}

  lint:
    <<: *defaults
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Lint
          command: |
            make lint
            make lint-commit

workflows:
  test:
    jobs:
      - localdev:
          context: org-global
      - dev-from-release:
          requires:
            - localdev
      - nro-from-release:
          context: org-global
          requires:
            - localdev
      - codeception:
          context: org-global
      - lint

  nightly-test-and-release:
    jobs:
      - localdev:
          context: org-global
          notify: true
      - dev-from-release:
          context: org-global
          notify: true
          requires:
            - localdev
      - nro-from-release:
          context: org-global
          notify: true
          requires:
            - localdev
      - codeception:
          context: org-global
          notify: true
      - publish-release:
          context: org-global
          notify: true
          requires:
            - localdev
            - dev-from-release
            - nro-from-release
            - codeception
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
